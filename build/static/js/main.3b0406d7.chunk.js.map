{"version":3,"sources":["components/Movies.js","components/MovieForm.js","App.js","serviceWorker.js","index.js"],"names":["Movies","_ref","movies","react_default","a","createElement","List","map","movie","image","Image","base_64","slice","substring","length","src","Item","key","id","Header","title","rating","MovieForm","onNewMovie","_useState","useState","_useState2","Object","slicedToArray","setTitle","_useState3","_useState4","setRating","_useState5","_useState6","setImage","Form","Field","Input","placeholder","value","onChange","e","target","Rating","icon","maxRating","onRate","_","data","Button","onClick","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","method","headers","Content-Type","body","JSON","stringify","sent","ok","console","log","stop","App","setMovies","useEffect","then","response","json","Container","style","marginTop","MovieForm_MovieForm","currentMovies","concat","toConsumableArray","Movies_Movies","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b0406d7.chunk.js","sourcesContent":["import React from \"react\";\nimport { List, Header, Rating } from \"semantic-ui-react\";\n\nexport const Movies = ({ movies }) => {\n\n\n\n\n  return (\n    <List>\n      {movies.map(movie => {\n        var image = new Image();\n        var base_64 = movie.image;\n        base_64 = base_64.slice(2);\n        base_64 = base_64.substring(0, base_64.length-1 )\n        image.src = 'data:image/jpg;base64,' +base_64;\n        return (\n          <List.Item key={movie.id}>\n            <Header>Title: {movie.title}</Header>\n            <Header>Rating: {movie.rating}</Header>\n            <img src={image.src}></img>\n          </List.Item>\n        );\n      })}\n    </List>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Form, Input, Rating, Button } from \"semantic-ui-react\";\n\nexport const MovieForm = ({ onNewMovie }) => {\n  const [title, setTitle] = useState(\"\");\n  const [rating, setRating] = useState(1);\n  const [image, setImage] = useState(\"\");\n\n  return (\n    <Form>\n      <Form.Field>\n        <Input\n          placeholder=\"movie title\"\n          value={title}\n          onChange={e => setTitle(e.target.value)}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Rating\n          icon=\"star\"\n          rating={rating}\n          maxRating={5}\n          onRate={(_, data) => {\n            setRating(data.rating);\n          }}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Button\n          onClick={async () => {\n            const movie = { title, rating, image };\n            const response = await fetch(\"/add_movie\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(movie)\n            });\n\n            if (response.ok) {\n              console.log(\"response worked!\");\n              onNewMovie(movie);\n              setTitle(\"\");\n              setRating(1);\n              setImage(\"\");\n            }\n          }}\n        >\n          submit\n        </Button>\n      </Form.Field>\n    </Form>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Movies } from \"./components/Movies\";\nimport { MovieForm } from \"./components/MovieForm\";\nimport { Container } from \"semantic-ui-react\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/movies\").then(response =>\n      response.json().then(data => {\n        setMovies(data.movies);\n      })\n    );\n  }, []);\n\n  return (\n    <Container style={{ marginTop: 40 }}>\n      <MovieForm\n        onNewMovie={movie =>\n          setMovies(currentMovies => [movie, ...currentMovies])\n        }\n      />\n      <Movies movies={movies} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}